card_draw <- function(dealers_hand_1){
next_card <- sample(deck,1)
dealers_hand_1 <- c(dealers_hand_1,next_card)
return(dealers_hand_1)
}
find_sum <- function(hand){
aces <- hand[hand == 1]
num_aces <- length(aces)
sum_1 <- num_aces*10 + sum(hand)
count <- 1
while(sum_1 > 21 & count < num_aces +1){
sum_1 <- sum_1 - 10
count <- count + 1
}
return(sum_1)
}
deck <- c(1,2,3,4,5,6,7,8,9,10,10,10,10)
initial_pair <- 12:21
player_win_matrix1 <- matrix(0,10,13)
player_win_matrix1[,1] <- initial_pair
tie_matrix1 <- matrix(0,10,13)
tie_matrix1[,1] <- initial_pair
for(i in 1:13){
for(j in 1:10){
initial_card <- initial_pair[j]
players_hand <- initial_card
result_vector <- NULL
player_hand_length <- 2
player_wins <- 0
ties <- 0
dealer_wins <- 0
###Player does not Draws a card!
for (x in 1:5000){
dealer_card <- deck[i]
dealers_hand_1 <- dealer_card
player_sum <- find_sum(players_hand)
dealer_sum <- find_sum(dealers_hand_1)
while(dealer_sum < 17 | (dealer_sum == 17 & dealer_sum > sum(dealers_hand_1))) {
dealers_hand_1 <- card_draw(dealers_hand_1)
dealer_sum <- find_sum(dealers_hand_1)
}
if(dealer_sum > 21) {dealer_sum = 0}
if (dealer_sum == 21 & length(dealers_hand_1) == 2) {dealer_sum = 22}
if (player_sum == 21 & player_hand_length == 2) {player_sum= 22}
if(dealer_sum > player_sum) {dealer_wins <- dealer_wins + 1} else {
if (dealer_sum == player_sum) {ties <- ties + 1} else {player_wins <- player_wins + 1}}
}
player_win_rate <- player_wins/length(result_vector)
tie_rate <- ties/length(result_vector)
player_win_matrix1[j,i] <- player_win_rate
tie_matrix1[j,i] <- tie_rate
}
}
player_win_matrix1
initial_pair <- 12:21
###Define player win probability and tie probability matrix
player_win_matrix1 <- matrix(0,10,13)
player_win_matrix1[,1] <- initial_pair
tie_matrix1 <- matrix(0,10,13)
tie_matrix1[,1] <- initial_pair
###We assume here that player does not draw any additional cards
###Here is the simulation of 5000 games for each possible player final score and dealer's first card
for(i in 1:13){
for(j in 1:10){
initial_card <- initial_pair[j]
players_hand <- initial_card
result_vector <- NULL
player_hand_length <- 2
player_wins <- 0
ties <- 0
dealer_wins <- 0
###Player does not Draws a card!
for (x in 1:5000){
dealer_card <- deck[i]
dealers_hand_1 <- dealer_card
player_sum <- find_sum(players_hand)
dealer_sum <- find_sum(dealers_hand_1)
while(dealer_sum < 17 | (dealer_sum == 17 & dealer_sum > sum(dealers_hand_1))) {
dealers_hand_1 <- card_draw(dealers_hand_1)
dealer_sum <- find_sum(dealers_hand_1)
}
if(dealer_sum > 21) {dealer_sum = 0}
if (dealer_sum == 21 & length(dealers_hand_1) == 2) {dealer_sum = 22}
if (player_sum == 21 & player_hand_length == 2) {player_sum= 22}
if(dealer_sum > player_sum) {dealer_wins <- dealer_wins + 1} else {
if (dealer_sum == player_sum) {ties <- ties + 1} else {player_wins <- player_wins + 1}}
}
player_win_rate <- player_wins/5000
tie_rate <- ties/5000
player_win_matrix1[j,i] <- player_win_rate
tie_matrix1[j,i] <- tie_rate
}
}
player_win_matrix1
player_win_matrix1 <- as.data.frame(player_win_matrix1)
player_win_matrix1
player_win_matrix1 <- round(as.data.frame(player_win_matrix1),1)
player_win_matrix1
player_win_matrix1 <- round(as.data.frame(player_win_matrix1),2)
player_win_matrix1
initial_pair <- 12:21
###Define player win probability and tie probability matrix
player_win_matrix1 <- matrix(0,10,13)
player_win_matrix1[,1] <- initial_pair
tie_matrix1 <- matrix(0,10,13)
tie_matrix1[,1] <- initial_pair
###We assume here that player does not draw any additional cards
###Here is the simulation of 5000 games for each possible player final score and dealer's first card
for(i in 1:13){
for(j in 1:10){
initial_card <- initial_pair[j]
players_hand <- initial_card
result_vector <- NULL
player_hand_length <- 2
player_wins <- 0
ties <- 0
dealer_wins <- 0
###Player does not Draws a card!
for (x in 1:5000){
dealer_card <- deck[i]
dealers_hand_1 <- dealer_card
player_sum <- find_sum(players_hand)
dealer_sum <- find_sum(dealers_hand_1)
while(dealer_sum < 17 | (dealer_sum == 17 & dealer_sum > sum(dealers_hand_1))) {
dealers_hand_1 <- card_draw(dealers_hand_1)
dealer_sum <- find_sum(dealers_hand_1)
}
if(dealer_sum > 21) {dealer_sum = 0}
if (dealer_sum == 21 & length(dealers_hand_1) == 2) {dealer_sum = 22}
if (player_sum == 21 & player_hand_length == 2) {player_sum= 22}
if(dealer_sum > player_sum) {dealer_wins <- dealer_wins + 1} else {
if (dealer_sum == player_sum) {ties <- ties + 1} else {player_wins <- player_wins + 1}}
}
player_win_rate <- player_wins/5000
tie_rate <- ties/5000
player_win_matrix1[j,i] <- player_win_rate
tie_matrix1[j,i] <- tie_rate
}
}
player_win_matrix1 <- round(as.data.frame(player_win_matrix1),2)
player_win_matrix1
colnames(player_win_matrix1) <- c("A","2","3","4","5","6","7","8","9","10","J","Q","K")
rownames(player_win_matrix1) <- c(12:21)
player_win_matrix1
View(player_win_matrix1)
tie_matrix1
player_win_matrix1_a_draw <- matrix(0,10,13)
player_win_matrix1_a_draw[,1] <- initial_pair
tie_matrix1_a_draw <- matrix(0,10,13)
tie_matrix1_a_draw[,1] <- initial_pair
for(i in 1:13){
for(j in 1:10){
result_vector <- NULL
player_hand_length <- 2
player_wins <- 0
ties <- 0
dealer_wins <- 0
###Player Draws a card!
for (x in 1:5000){
initial_card <- initial_pair[j]
players_hand <- initial_card
dealer_card <- deck[i]
dealers_hand_1 <- dealer_card
players_hand <- card_draw(players_hand)
player_hand_length <- 3
player_sum <- find_sum(players_hand)
dealer_sum <- find_sum(dealers_hand_1)
while(dealer_sum < 17 | (dealer_sum == 17 & dealer_sum > sum(dealers_hand_1))) {
dealers_hand_1 <- card_draw(dealers_hand_1)
dealer_sum <- find_sum(dealers_hand_1)
}
if(dealer_sum > 21) {dealer_sum = 0}
if(player_sum > 21) {player_sum = 0}
if (dealer_sum == 21 & length(dealers_hand_1) == 2) {dealer_sum = 22}
if (player_sum == 21 & player_hand_length == 2) {player_sum = 22}
if(dealer_sum > player_sum) {dealer_wins <- dealer_wins + 1} else {
if (dealer_sum == player_sum) { ties <- ties + 1 } else {player_wins <- player_wins + 1}}
result_vector <- c(result_vector,end_result)
}
player_win_rate <- player_wins/length(result_vector)
tie_rate <- ties/length(result_vector)
player_win_matrix1_a_draw[j,i] <- player_win_rate
tie_matrix1_a_draw[j,i] <- tie_rate
print(i)
}
}
0.284*0.284
q()
notasTrabajo <- function(p1, p2, p3, p4, p5, p6, p7){
np1 <- ((5/7)*p1)/4
np2 <- ((5/7)*p2)/3
np3 <- ((5/7)*p3)/3
np4 <- ((5/7)*p4)/2
np5 <- ((5/7)*p5)/7
np6 <- ((5/7)*p6)/2
np7 <- ((5/7)*p7)/2
np1+np2+np3+np4+np5+np6+np7
}
notasTrabajo(4,3,3,1,6,2,2)
q()
premio <- 3000000000
sma <- 2780000
saa <- sma*12
premio/saa
premio/(saa*2)
saa
0.5{2}
0.5^2
1/12
1/36
1/1000
install.packages("caret")
library(caret)
q()
library(caret)
library(kernlab)
data(spam)
str(spam)
?createDataPartition()
str(spam$type)
summary(spam$type)
summary(spam$type)/dim(spam)[1]
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
str(inTrain)
inTrain
View(inTrain)
str(inTrain)
dim(inTrain)
dim(inTrain)[1]/dim(spam)[1]
training <- spam[inTrain,]
test <- spam[-inTrain,]
summary(spam$type)/dim(spam)[1]
summary(training$type)/dim(training)[1]
summary(test$type)/dim(test)[1]
install.packages("ISLR")
library(ISLR)
library(caret)
library(ggplot2)
data("Wage")
summary(Wage)
0.36253^2
q()
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
str(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Cement)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Cement)) +
geom_point()
names(mixtures)
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = FlyAsh)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Age)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = BlastFurnaceSlag)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Water)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Superplasticizer)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = CoarseAggregate)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = FineAggregate)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = FlyAsh)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Age)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = BlastFurnaceSlag)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Water)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = Superplasticizer)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = CoarseAggregate)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = FineAggregate)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength)) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = FlyAsh)) +
geom_point()
library(Hmisc)
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = cut2(FlyAsh,g=2))) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = cut(Age,g=2))) +
geom_point()
ggplot(mixtures, aes(x=1:1030, y=CompressiveStrength, color = cut2(Age,g=2))) +
geom_point()
ggplot(training, aes(x=1:1030, y=CompressiveStrength, color = FlyAsh)) +
geom_point()
training
ggplot(training, aes(x=1:1030, y=CompressiveStrength, color = FlyAsh)) +
geom_point()
ggplot(training, aes(x=1:774, y=CompressiveStrength, color = FlyAsh)) +
geom_point()
ggplot(mixtures, aes(y=SuperPlasticizer)) + geom_histogram()
ggplot(mixtures, aes(y=Superplasticizer)) + geom_histogram()
ggplot(mixtures, aes(y=Superplasticizer)) + geom_histogram()
ggplot(mixtures, aes(y=Superplasticizer)) + geom_histogram(bins = 30)
ggplot(mixtures, aes(x=Superplasticizer)) + geom_histogram(bins = 30)
ggplot(mixtures, aes(x=Superplasticizer)) + geom_histogram()
ggplot(mixtures, aes(x=log(Superplasticizer))) + geom_histogram()
ggplot(mixtures, aes(x=log(Superplasticizer + 1))) + geom_histogram()
summary(mixtures$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
summary(training$diagnosis)
M <- abs(cor(training[,c(-1,58:69)]))
M <- abs(cor(training[,-c(1:57,70:131)]))
diag(M) <- 0
which(M > 0.8, arr.ind = T)
which(M > 0.7, arr.ind = T)
smallTraining <- training[,-c(1:57,70:131)]
prComp <- prcomp(smallTraining)
prComp$rotation
library(caret)
library(kernlab)
preProc <- preProcess(smallTraining, method = "pca", pcaComp = 12)
trainingPC <- predict(preProc, smallTraining)
smallTraining <- training[,-c(2:57,70:131)]
prComp <- prcomp(smallTraining[,-1])
prComp$rotation
library(caret)
library(kernlab)
preProc <- preProcess(smallTraining[,-1], method = "pca", pcaComp = 12)
trainingPC <- predict(preProc, smallTraining[,-1])
modelFit <- train(smallTraining$diagnosis ~ ., method = "glm", data = trainingPC)
modelFit <- train(diagnosis ~ ., method = "glm", data = trainingPC)
modelFit <- train(smallTraining$diagnosis ~ ., method = "glm", data = trainingPC)
install.packages("e1071")
prComp$rotation
View(prComp$rotation)
names(smallTraining)
modelFit <- train(smallTraining$diagnosis ~ ., method = "glm", data = trainingPC)
smallTraining <- training[,-c(2:57,70:131)]
preProc <- preProcess(smallTraining[,-1], method = "pca", pcaComp = 12)
trainPC <- predict(preProc, smallTraining[,-1])
modelFit <- train(smallTraining$diagnosis ~ ., method = "glm", data = trainPC)
modelFit <- train(smallTraining$diagnosis ~ trainPC$PC1 + trainPC$PC2 +
trainPC$PC3 + trainPC$PC4 + trainPC$PC5 +
trainPC$PC6 + trainPC$PC7 + trainPC$PC8 +
trainPC$PC9 + trainpc$PC10 + trainPC$PC11 +
trainPC$PC12
, method = "glm")
modelFit <- train(smallTraining$diagnosis ~ trainPC$PC1 + trainPC$PC2 +
trainPC$PC3 + trainPC$PC4 + trainPC$PC5 +
trainPC$PC6 + trainPC$PC7 + trainPC$PC8 +
trainPC$PC9 + trainPC$PC10 + trainPC$PC11 +
trainPC$PC12
, method = "glm")
modelFit <- train(smallTraining$diagnosis ~ trainPC$PC1 + trainPC$PC2 +
trainPC$PC3 + trainPC$PC4 + trainPC$PC5 +
trainPC$PC6 + trainPC$PC7 + trainPC$PC8 +
trainPC$PC9 + trainPC$PC10 + trainPC$PC11 +
trainPC$PC12
, method = "glm", data = trainPC)
smallTraining <- training[,-c(2:57,70:131)]
preProc <- preProcess(smallTraining[,-1], method = "pca", pcaComp = 11)
trainPC <- predict(preProc, smallTraining[,-1])
modelFit <- train(smallTraining$diagnosis ~ ., method = "glm", data = trainPC)
preProc <- preProcess(log(smallTraining[,-1]+1), method = "pca", pcaComp = 11)
preProc <- preProcess(log10(smallTraining[,-1]+1), method = "pca", pcaComp = 11)
trainPC <- predict(preProc, log10(smallTraining[,-1]+1))
modelFit <- train(smallTraining$diagnosis ~ ., method = "glm", data = trainPC)
q()
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain.]
testing <- spam[-inTrain,]
modelFit <- train(training$type ~ ., method="glm", preProcess="pca",data=training)
warnings()
confusionMatrix(testing$type, predict(modelFit, testing))
modelFit <- train(training$type ~ ., method="glm", preProcess="pca",data=training)
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34], spam[,32])
plot(spam[,34], spam[,40])
plot(spam[,32], spam[,40])
plot(spam[,34], spam[,32])
q()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
smallTraining <- training[,-c(2:57,70:131)]
smallTesting <- testing[,-c(2:57,70:131)]
preProc <- preProcess(smallTraining[,-1], method = "pca", pcaComp = 7)
trainPC <- predict(preProc, smallTraining[,-1])
modelFit <- train(x=trainPC, y=smallTraining$diagnosis, method = "glm")
testPC <- predict(preProc, smallTesting[,-1])
confusionMatrix(smallTesting$diagnosis, predict(modelFit,testPC))
modefitAll <- train(x=smallTraining[,-1], y=smallTraining[,1],
method = "glm")
predTest <- predict(modefitAll, newdata=smallTesting[,-1])
mean(predTest==smallTesting$diagnosis)
pca <- prcomp(smallTraining[,-1])
print(pca)
plot(pca)
summary(pca)
preProc$rotation
preProc$rotation
preProc$rotation
shiny::runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
?HTML
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
q()
shiny::runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
setwd("C:/Users/USUARIO/phvarianza")
runApp()
runApp()
runApp()
shiny::runGitHub(repo="semilleroApps", user="fhernanb", sub="phmedia")
runApp()
runApp()
runApp('C:/Users/USUARIO/Desktop/Simposio_V2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/USUARIO/Desktop/Simposio_V2')
runApp('C:/Users/USUARIO/Desktop/Simposio_V2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
