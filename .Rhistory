summary(fit1)
-1.12600 + 2.09057
0.55124 + 0.96457
q()
($35 925 – $15 546)/7
(35 925 – 15 546)/7
(35925 – 15546)/7
(35925 - 15546)/7
q()
30/80
q()
mid <- c(89, 72, 94, 69)
mean(mid)
(94-mean(mid))/range(mid)
(94-mean(mid))/(max(mid)- min(mid))
library(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data = hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Female",])
lm <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
View(hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, data = hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data = hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which = 1)
coef(fitno)-coef(fit)
coef(fit) - coef(fitno)
head(dfbeta(fit))
View(out2)
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - (resid(fit)[1]/resno)
head(hatvalues(fit))
sigma <- sqrt(sum(fit$residuals) / fit$df.residual)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1] / (sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / (2*sigma^2)
plot(fit, which = 5)
q()
shiny::runGitHub(repo="semilleroApps", user="fhernanb", sub="phmedia")
x <- rnorm(20, mean = 15, sd = 7)
sigma.test(x, sigma = 6)
q()
?dist
?distribution
?pnorm()
x <- 0:100
y <- dchisq(x, length(x)-1)
library(ggplot2)
ggplot(data.frame(x=x,y=y), aes(x=x, y=y)) + geom_bar()
ggplot(data.frame(x=x,y=y), aes(x=x, y=y)) + geom_point()
x <- -100:100
y <- dchisq(x, length(x)-1)
library(ggplot2)
ggplot(data.frame(x=x,y=y), aes(x=x, y=y)) + geom_point()
mean(x)
x <- 0:8
y <- dchisq(x, length(x)-1)
library(ggplot2)
ggplot(data.frame(x=x,y=y), aes(x=x, y=y)) + geom_point()
ggplot(data.frame(x=x,y=y), aes(x=x, y=y)) + geom_point() + geom_line()
y <- dchisq(x, c(1:9))
y
x <- 0:8
y <- dchisq(x, c(1:8))
x
y
library(ggplot2)
ggplot(data.frame(x=x,y=y), aes(x=x, y=y)) + geom_point() + geom_line()
x <- rep(0:8,9)
x
y <- dchisq(x, c(1:8))
y
?rep()
x
rep()
rep(1:8, each=9)
y <- dchisq(x, rep(1:8, each=9))
x <- rep(0:8,9)
y <- dchisq(x, rep(1:8, each=9))
library(ggplot2)
ggplot(data.frame(x=x,y=y), aes(x=x, y=y)) + geom_point() + geom_line()
ggplot(data.frame(x=x,y=y,z=as.factor(rep(1:8, each=9))), aes(x=x, y=y, color=z)) +
geom_point() + geom_line()
bd <- data.frame(x=x,y=y,z=as.factor(rep(1:8, each=9)))
bd <- data.frame(x=x,y=y,z=rep(1:8, each=9))
bd <- data.frame(x=x,y=y,z=rep(1:8, each=8))
x <- rep(0:8,9)
y <- dchisq(x, rep(1:8, each=9))
z=rep(1:8, each=8)
z=rep(1:8, each=9)
x <- rep(0:8,8)
y <- dchisq(x, rep(1:8, each=9))
library(ggplot2)
bd <- data.frame(x=x,y=y,z=rep(1:8, each=9))
bd
View(bd)
bd <- data.frame(x=x,y=y,z=as.factor(rep(1:8, each=9)))
ggplot(bd, aes(x=x, y=y, color=z)) +
geom_point() + geom_line()
pnorm(2.47)
1- pnorm(2.47)
ggplot(bd, aes(x=x, y=y, color=z)) +
geom_line()
ggplot(bd, aes(x=x, y=y, color=z)) +
geom_line("smooth")
ggplot(bd, aes(x=x, y=y, color=z)) +
geom_line()
x= 0:20
y=dchisq(x,3)
ggplot(data.frame(x=x,y=y), aes(x=x,y=y))+ geom_line()
data.frame(x=x,y=y)
q()
(1.3+7+3.6+4.1+5)/5
(1.3+7+3.6+4.1)/4
q()
install.packages("shiny")
shiny::runApp('D:/Santiago/2017/Cua/Investigacion/Proyectos Aplicativos Web Shiny Estadistica/Ej Ecuaciones bonitas en shiny')
runApp('D:/Santiago/2017/Cua/Investigacion/Proyectos Aplicativos Web Shiny Estadistica/Ej Ecuaciones bonitas en shiny')
runApp('D:/Santiago/2017/Cua/Investigacion/Proyectos Aplicativos Web Shiny Estadistica/Ej Ecuaciones bonitas en shiny')
runApp('D:/Santiago/2017/Cua/Investigacion/Proyectos Aplicativos Web Shiny Estadistica/Ej Ecuaciones bonitas en shiny')
library(shiny)
server <- function(input, output, session) {
output$formula <- renderPrint({
print(paste0("Use this formula: $$\\hat{A}_{\\small{\\textrm{M€}}} =", 1,"$$"))
})
}
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
withMathJax(textOutput("formula"))
)
)
)
shinyApp(ui = ui, server = server)
require(shiny)
runApp(
list(ui = pageWithSidebar(
headerPanel(withMathJax("$$\\text{Display formula in heading }X_n=X_{n-1}-\\varepsilon$$")),
sidebarPanel( ),
mainPanel( )
),
server= function(input, output, session){
}
)
runApp(
list(ui = pageWithSidebar(
headerPanel(withMathJax("$$\\text{Display formula in heading }X_n=X_{n-1}-\\varepsilon$$")),
sidebarPanel( ),
mainPanel( )
),
server= function(input, output, session){
}
)
)
require(shiny)
runApp(
list(ui = pageWithSidebar(
headerPanel(withMathJax("$$\\text{Display formula in heading }X_n=X_{n-1}-\\varepsilon$$")),
sidebarPanel( ),
mainPanel( )
),
server= function(input, output, session){
}
)
)
require(shiny)
runApp(
list(ui = pageWithSidebar(
headerPanel(withMathJax("$$\\text{Display formula in heading }X_n=X_{n-1}-\\varepsilon$$")),
sidebarPanel( ),
mainPanel( )
),
server= function(input, output, session){
}
)
)
version
package_version(shiny)
package_version("shiny")
packageVersion("shiny")
ui <- fluidPage(
withMathJax(),
tabPanel(
title = "Diagnostics",
h4(textOutput("diagTitle")),
uiOutput("formula")
)
)
server <- function(input, output, session){
output$formula <- renderUI({
my_calculated_value <- 5
withMathJax(paste0("Use this formula: $$\\hat{A}_{\\small{\\textrm{M€}}} =", my_calculated_value,"$$"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
withMathJax(),
tabPanel("Diagnostics", h4(textOutput("diagTitle")),
withMathJax(uiOutput("formula")),
)
)
server <- function(input, output, session){
output$formula <- renderUI({
return(HTML(paste0("<p>,"Use this formula: $$\\hat{A}_{\\small{\\textrm{M€}}} =", my_calculated_value,"$$","</p>)))
})
}
shinyApp(ui, server)
ui <- fluidPage(
withMathJax(),
tabPanel("Diagnostics", h4(textOutput("diagTitle")),
withMathJax(uiOutput("formula")),
)
)
server <- function(input, output, session){
output$formula <- renderUI({
return(HTML(paste0("<p>,"Use this formula: $$\\hat{A}_{\\small{\\textrm{M€}}} = 1.69$$", my_calculated_value,"$$","</p>)))
})
}
shinyApp(ui, server)
runApp('D:/Santiago/2017/Cua/Investigacion/Proyectos Aplicativos Web Shiny Estadistica/Ej Ecuaciones bonitas en shiny')
runApp('C:/Users/USUARIO/phvarianza')
install.packages("MathJax")
shiny::runApp('C:/Users/USUARIO/phvarianza')
?cat()
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
paste(month.abb, nth, sep = ": ", collapse = "; ")
nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
nth
paste(month.abb, nth, sep = ": ", collapse = "; ")
msg <- "==================================================\n"
msg2 <- paste(msg, "Var:")
strsplit(msg2, "\n")[[1]]
strsplit(msg2)
strsplit(msg2, "\n")
runApp('C:/Users/USUARIO/phvarianza')
strsplit(msg2, "\n")
paste("Varianza muestral = ", varianza_muestral,"\n",
"Estadistico de prueba = ", ep,
"Nivel de significancia = ", nivel_significancia,
"Prueba de hipotesis de dos colas",quote=FALSE,
"Region critica de rechazo de hipotesis nula",
"Lado izquierdo = ", lado_izq,
"Lado derecho = ", lado_der,
"QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO",
sep = "\n")
runApp('D:/Santiago/2017/Cua/Investigacion/Proyectos Aplicativos Web Shiny Estadistica/Ej Ecuaciones bonitas en shiny')
runApp('C:/Users/USUARIO/phvarianza')
paste("Varianza muestral = ","\n",
"Estadistico de prueba = ",
"Nivel de significancia = ",
"Prueba de hipotesis de dos colas",
"Region critica de rechazo de hipotesis nula",
"Lado izquierdo = ",
"Lado derecho = ",
"QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO",
sep = "\n")
paste("Varianza muestral = ","\n",
"Estadistico de prueba = ",
"Nivel de significancia = ",
"Prueba de hipotesis de dos colas",
"Region critica de rechazo de hipotesis nula",
"Lado izquierdo = ",
"Lado derecho = ",
"QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO")
a <- paste("Varianza muestral = ","\n",
"Estadistico de prueba = ",
"Nivel de significancia = ",
"Prueba de hipotesis de dos colas",
"Region critica de rechazo de hipotesis nula",
"Lado izquierdo = ",
"Lado derecho = ",
"QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO")
strsplit()
strsplit(a,"\n")[[1]]
runApp('C:/Users/USUARIO/phvarianza')
runApp('C:/Users/USUARIO/phvarianza')
paste("Varianza muestral = ","\n",
"Estadistico de prueba = ",
"Nivel de significancia = ",
"Prueba de hipotesis de dos colas",
"Region critica de rechazo de hipotesis nula",
"Lado izquierdo = ",
"Lado derecho = ",
"QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO")
strsplit(a,"\n")[[1]]
runApp('C:/Users/USUARIO/phvarianza')
prueba_hip_varianza <- function(variable, varianza_h_n, nivel_significancia,
tipo_de_prueba){
grados_de_libertad <- length(variable) - 1
if(tipo_de_prueba == "two.sided"){
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado izquierdo
#de la distribución
lado_izq <- qchisq(nivel_significancia/2,grados_de_libertad)
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado derecho
#de la distribución
lado_der <- qchisq((1-nivel_significancia/2), grados_de_libertad)
varianza_muestral <- var(variable)
#Estadístico de prueba
ep <- grados_de_libertad*varianza_muestral/varianza_h_n
#paste0("Varianza muestral = ", varianza_muestral)
#paste0("Estadistico de prueba = ", ep)
#paste0("Grados de libertad = ", grados_de_libertad)
#paste0("Nivel de significancia = ", nivel_significancia)
#paste0("Prueba de hipotesis de dos colas",quote=FALSE)
#paste0("Region critica de rechazo de hipotesis nula")
#paste0("Lado izquierdo = ", lado_izq)
#paste0("Lado derecho = ", lado_der)
#paste0((100 - nivel_significancia*100),"%","Intervalo de confianza")
#paste0(c(grados_de_libertad * varianza_muestral/lado_izq,
#       grados_de_libertad * varianza_muestral/lado_der))
# paste("Varianza muestral = ", varianza_muestral,tags$br(),
#       "Estadistico de prueba = ", ep,
#      "Nivel de significancia = ", nivel_significancia,
#     "Prueba de hipotesis de dos colas",
#    "Region critica de rechazo de hipotesis nula",
#   "Lado izquierdo = ", lado_izq,
#  "Lado derecho = ", lado_der,
#  "QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO")
bd <- data.frame(respuesta=c("Varianza muestral",
"Estadistico de prueba",
"Nivel de significancia",
"Prueba de hipotesis de dos colas",
"Region critica de rechazo de hipotesis nula",
"Lado izquierdo = ",
"Lado derecho = ",
"Observaciones"),
valores=c(as.character(varianza_muestral),
as.character(ep),
as.character(nivel_significancia),
"",
"",
as.character(lado_izq),
as.character(lado_der),
"Quedo pendiente...."))
}else{
if(tipo_de_prueba == "less"){
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado izquierdo
#de la distribución
lado_izq <- qchisq(nivel_significancia/2,grados_de_libertad)
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado derecho
#de la distribución
lado_der <- qchisq((1-nivel_significancia/2), grados_de_libertad)
varianza_muestral <- var(variable)
#Estadístico de prueba
ep <- grados_de_libertad*varianza_muestral/varianza_h_n
paste0("Varianza muestral = ", varianza_muestral)
paste0("Estadistico de prueba = ", ep)
paste0("Grados de libertad = ", grados_de_libertad)
paste0("Nivel de significancia = ", nivel_significancia)
paste0("Prueba de hipotesis de dos colas",quote=FALSE)
paste0("Region critica de rechazo de hipotesis nula")
paste0("Lado izquierdo = ", lado_izq)
paste0((100 - nivel_significancia*100),"%","Intervalo de confianza")
paste0(c(grados_de_libertad * varianza_muestral/lado_izq,
grados_de_libertad * varianza_muestral/lado_der))
paste0("QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO",quote=FALSE)
}else{
if(tipo_de_prueba == "greater"){
paste0("Varianza muestral = ", varianza_muestral)
paste0("Estadistico de prueba = ", ep)
paste0("Grados de libertad = ", grados_de_libertad)
paste0("Nivel de significancia = ", nivel_significancia)
paste0("Prueba de hipotesis de dos colas",quote=FALSE)
paste0("Region critica de rechazo de hipotesis nula")
paste0("Lado derecho = ", lado_der)
paste0((100 - nivel_significancia*100),"%","Intervalo de confianza")
paste0(c(grados_de_libertad * varianza_muestral/lado_izq,
grados_de_libertad * varianza_muestral/lado_der))
paste0("QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO",quote=FALSE)
}else{
"Usted debe proporcionar el argumento tipo de prueba. Este asume tres valores:
Diferente (dos colas)
Menor (una cola)
Mayo (una cola)
Usted debe elegir uno."
}
}
}
}
prueba_hip_varianza <- function(variable, varianza_h_n, nivel_significancia,
tipo_de_prueba){
grados_de_libertad <- length(variable) - 1
if(tipo_de_prueba == "two.sided"){
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado izquierdo
#de la distribución
lado_izq <- qchisq(nivel_significancia/2,grados_de_libertad)
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado derecho
#de la distribución
lado_der <- qchisq((1-nivel_significancia/2), grados_de_libertad)
varianza_muestral <- var(variable)
#Estadístico de prueba
ep <- grados_de_libertad*varianza_muestral/varianza_h_n
#paste0("Varianza muestral = ", varianza_muestral)
#paste0("Estadistico de prueba = ", ep)
#paste0("Grados de libertad = ", grados_de_libertad)
#paste0("Nivel de significancia = ", nivel_significancia)
#paste0("Prueba de hipotesis de dos colas",quote=FALSE)
#paste0("Region critica de rechazo de hipotesis nula")
#paste0("Lado izquierdo = ", lado_izq)
#paste0("Lado derecho = ", lado_der)
#paste0((100 - nivel_significancia*100),"%","Intervalo de confianza")
#paste0(c(grados_de_libertad * varianza_muestral/lado_izq,
#       grados_de_libertad * varianza_muestral/lado_der))
# paste("Varianza muestral = ", varianza_muestral,tags$br(),
#       "Estadistico de prueba = ", ep,
#      "Nivel de significancia = ", nivel_significancia,
#     "Prueba de hipotesis de dos colas",
#    "Region critica de rechazo de hipotesis nula",
#   "Lado izquierdo = ", lado_izq,
#  "Lado derecho = ", lado_der,
#  "QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO")
bd <- data.frame(respuesta=c("Varianza muestral",
"Estadistico de prueba",
"Nivel de significancia",
"Prueba de hipotesis de dos colas",
"Region critica de rechazo de hipotesis nula",
"Lado izquierdo = ",
"Lado derecho = ",
"Observaciones"),
valores=c(as.character(varianza_muestral),
as.character(ep),
as.character(nivel_significancia),
"",
"",
as.character(lado_izq),
as.character(lado_der),
"Quedo pendiente...."))
bd
}else{
if(tipo_de_prueba == "less"){
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado izquierdo
#de la distribución
lado_izq <- qchisq(nivel_significancia/2,grados_de_libertad)
#Valor de la distribucion chi-cuadrado
#a partir del cual inicia la region de rechazo en el lado derecho
#de la distribución
lado_der <- qchisq((1-nivel_significancia/2), grados_de_libertad)
varianza_muestral <- var(variable)
#Estadístico de prueba
ep <- grados_de_libertad*varianza_muestral/varianza_h_n
paste0("Varianza muestral = ", varianza_muestral)
paste0("Estadistico de prueba = ", ep)
paste0("Grados de libertad = ", grados_de_libertad)
paste0("Nivel de significancia = ", nivel_significancia)
paste0("Prueba de hipotesis de dos colas",quote=FALSE)
paste0("Region critica de rechazo de hipotesis nula")
paste0("Lado izquierdo = ", lado_izq)
paste0((100 - nivel_significancia*100),"%","Intervalo de confianza")
paste0(c(grados_de_libertad * varianza_muestral/lado_izq,
grados_de_libertad * varianza_muestral/lado_der))
paste0("QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO",quote=FALSE)
}else{
if(tipo_de_prueba == "greater"){
paste0("Varianza muestral = ", varianza_muestral)
paste0("Estadistico de prueba = ", ep)
paste0("Grados de libertad = ", grados_de_libertad)
paste0("Nivel de significancia = ", nivel_significancia)
paste0("Prueba de hipotesis de dos colas",quote=FALSE)
paste0("Region critica de rechazo de hipotesis nula")
paste0("Lado derecho = ", lado_der)
paste0((100 - nivel_significancia*100),"%","Intervalo de confianza")
paste0(c(grados_de_libertad * varianza_muestral/lado_izq,
grados_de_libertad * varianza_muestral/lado_der))
paste0("QUEDO PENDIENTE DE COLOCAR UN PARRAFO QUE PERMITA CONCLUIR AUTOMATICAMENTE, ES DECIR SI SE RECHAZA LA HIPOTESIS NULA O NO",quote=FALSE)
}else{
"Usted debe proporcionar el argumento tipo de prueba. Este asume tres valores:
Diferente (dos colas)
Menor (una cola)
Mayo (una cola)
Usted debe elegir uno."
}
}
}
}
setwd("C:/Users/USUARIO/phvarianza")
bd <- read.table("geardata.txt", col.names = c("diametro", "bold number"))
head(bd)
prueba_varianza(bd$diametro,0.01,0.05,"two.sided")
prueba_hip_varianza(bd$diametro,0.01,0.05,"two.sided")
shiny::runApp()
q()
